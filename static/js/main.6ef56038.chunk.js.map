{"version":3,"sources":["component/Card.js","component/CardList.js","component/SearchBox.js","component/Scroll.js","component/ErrorBoundary.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundary","state","hasError","error","info","this","setstate","Component","App","onSearchchange","event","setState","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLocaleLowerCase","includes","length","padding","display","alignContent","justifyContent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kSAcmBA,EAXN,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAOC,EAAc,EAAdA,MAAQC,EAAM,EAANA,GAC1B,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,OAAMC,IAAG,+BAA0BH,EAA1B,cAClB,4BAAKF,GACL,2BAAIC,KCYDK,EAjBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACTC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACnC,OACI,kBAAC,EAAD,CACAC,IAAMD,EACNT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,WAGzB,OACJ,6BACKO,ICFUK,G,MAVE,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC3B,OACI,yBAAKZ,UAAW,QACZ,2BAAOA,UAAW,mCAClBa,KAAO,SAASC,YAAc,gBAAgBC,SAAUH,OCCrDI,EAND,SAACC,GACX,OAAO,yBAAKC,MAAO,CAACC,UAAU,SAAWC,OAAO,UAC3CH,EAAMI,WCoBCC,E,YArBZ,WAAYL,GAAO,IAAD,8BACd,4CAAMA,KACDM,MAAO,CACRC,UAAU,GAHA,E,+EAMJC,EAAQC,GACtBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAOpB,OAAGG,KAAKJ,MAAMC,SACP,6DAGJG,KAAKV,MAAMI,a,GAnBMQ,aC2CbC,G,kBApCb,aAAe,IAAD,8BACZ,+CAWFC,eAAe,SAACC,GACd,EAAKC,SAAS,CAACtB,YAAaqB,EAAME,OAAOC,SAXzC,EAAKZ,MAAQ,CACXnB,OAAQ,GACRO,YAAa,IAJH,E,iFAOM,IAAD,OACjByB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKP,SAAS,CAAC7B,OAAOoC,S,+BAK3B,IAAD,EACwBb,KAAKJ,MAA7BZ,EADA,EACAA,YAAcP,EADd,EACcA,OACfqC,EAAerC,EAAOsC,QAAO,SAAAC,GACnC,OAAOA,EAAM9C,KAAK+C,oBAAoBC,SAASlC,EAAYiC,wBAEzD,OAAQxC,EAAO0C,OAGf,yBAAK9C,UAAU,MACb,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWY,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU3B,OAAQqC,OAPvB,wBAAIvB,MAAO,CAAC6B,QAAQ,QAASC,QAAQ,OAASC,aAAa,SAAWC,eAAe,WAArF,e,GAtBWrB,cCIEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.6ef56038.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({name , email , id})=>{\n    return (\n        <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n            <img alt='robo'src={`https://robohash.org/${id}?200x200`} /> \n            <h2>{name}</h2>\n            <p>{email}</p>\n            \n        </div>\n    );\n    }\n\n    export default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots})=> {\n    const cardComponent = robots.map((user,i)=>{\n        return (\n            <Card \n            key= {i} \n            id={robots[i].id} \n            name={robots[i].name} \n            email={robots[i].email} />\n        );\n    })\n    return (\n<div>\n    {cardComponent}\n</div>\n    );\n}\n\nexport default CardList;","import React from 'react';\nimport './SearchBox.css';\n\nconst SearchBox =({searchfield,searchChange}) => {\n    return (\n        <div className ='pa2 ' >\n            <input className ='pa3 ba b--green bg-lightest-blue' \n            type = 'search' placeholder = 'search robots' onChange={searchChange}/>\n        </div>\n        \n    );\n} \n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll =(props)=>{\n    return <div style={{overflowY:'scroll' , height:'450px'}}>\n        {props.children}\n    </div>\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state ={\n            hasError: false\n        }\n    }\ncomponentDidCatch(error , info){\n    this.setstate({hasError:true})\n}\n\n\n\n\n    render(){\n        if(this.state.hasError){\n        return <h1>Ooooooooooops that's not good</h1>\n    }\n\n    return this.props.children;\n} \n}\n export default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from '../component/CardList';\nimport SearchBox from '../component/SearchBox'\nimport Scroll from '../component/Scroll.js'\nimport ErrorBoundary from '../component/ErrorBoundary'\nimport './App.css'\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: '',\n    }\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json())\n    .then(users=>this.setState({robots:users}))\n  }\n  onSearchchange=(event)=>{\n    this.setState({searchfield: event.target.value})\n  }\n  render() {\n    const {searchfield , robots} = this.state;\n    const filterRobots = robots.filter(robot =>{\n    return robot.name.toLocaleLowerCase().includes(searchfield.toLocaleLowerCase())\n      })\n      return !robots.length ?\n       <h1 style={{padding:'450px', display:'flex' , alignContent:'center' , justifyContent:'center'}}>Loading</h1> :\n       (\n      <div className='tc'>\n        <h1 className='f1'>Robo Friends</h1>\n        <SearchBox searchChange={this.onSearchchange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filterRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n          }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Card from './Card';\nimport App from './container/App.js'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App /> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}